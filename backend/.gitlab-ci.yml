cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90
include:
  - template: Security/SAST.gitlab-ci.yml
  - project: templates/ci
    file: DockerInDockerTemplate.yml
stages:
  - build
  - test
  - release
  - notify
  - deploy
build-backend-code-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $DOCKERHUB_LOGIN -p $DOCKERHUB_PASS
  script:
    - cd backend
    - >
      docker build --build-arg VERSION=$VERSION --tag
      $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
spotbugs-sast:
  stage: test
  dependencies:
    - build-backend-code-job
  cache:
    paths:
      - ${CI_PROJECT_DIR}/.m2
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  artifacts:
    reports:
      sast: gl-sast-report.json
sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_BACKEND_KEY}
      -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN_BACKEND}
      -Dsonar.projectName=${SONAR_PROJECT_BACKEND_NAME}
upload-backend-release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $DOCKERHUB_LOGIN -p $DOCKERHUB_PASS
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest
  needs:
    - sonarqube-backend-sast
telegram-notification-backend:
  stage: notify
  needs:
    - upload-backend-release
  script:
    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\":
      \"-1001860249898\", \"text\": \"Вышла новая версия бэкенда сосисочной -
      $VERSION. Скачать бэкенд можно по ссылке —
      ${NEXUS_BACKEND_REPO_URL}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar\"}"
      https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage'
deploy:
  stage: deploy
  image: alpine:3.15.0
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - >-
      ssh ${DEV_USER}@${DEV_HOST} "export "VERSION=${VERSION}"; export
      "PSQL_HOST=${PSQL_HOST}"; export "PSQL_DBNAME=${PSQL_DBNAME}"; export
      "PSQL_PORT=${PSQL_PORT}"; export "PSQL_USERNAME=${PSQL_USERNAME}"; export
      "PSQL_PASSWORD=${PSQL_PASSWORD}"; export "MONGO_HOST=${MONGO_HOST"};
      export "MONGO_DATABASE=${MONGO_DATABASE}"; export
      "MONGO_PORT=${MONGO_PORT}"; export "MONGO_USER=${MONGO_USER}"; export
      "MONGO_PASSWORD=${MONGO_PASSWORD}";

      /bin/bash -s " < ./backend/deploy.sh
