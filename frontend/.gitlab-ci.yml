cache:
  paths:
    - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   - build
   - test
   - release
   - notify
   - deploy


build-frontend-code-job:
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build
  cache:
    paths:
    - .npm/ # для хранения зависимостей сборки фронтенда
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - frontend/dist/frontend
  only:
     changes:
     - frontend/*
     
sonar-scanner:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_FRONTEND_KEY}
      -Dsonar.sources=. 
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_FRONTEND}

upload-frontend-release:
  variables:
    GIT_STRATEGY: none
  stage: release
  image: docker:20.10.12-dind-rootless
    before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest
  needs:
    - sonar-scanner

telegram-notification-frontend:
  stage: notify
  needs:
    - upload-frontend-release
  script:
    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"-1001860249898\", \"text\": \"Вышла новая версия фронтенда сосисочной - $VERSION. Скачать фронтенд можно по ссылке — ${NEXUS_FRONTEND_REPO_URL}/${VERSION}/sausage-store-${VERSION}.tar.gz\"}" https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage'

deploy:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "PSQL_HOST=${PSQL_HOST}";
      export "PSQL_DBNAME=${PSQL_DBNAME}";
      export "PSQL_PORT=${PSQL_PORT}";
      export "PSQL_USERNAME=${PSQL_USERNAME}";
      export "PSQL_PASSWORD=${PSQL_PASSWORD}";
      export "MONGO_HOST=${MONGO_HOST}";
      export "MONGO_DATABASE=${MONGO_DATABASE}";
      export "MONGO_PORT=${MONGO_PORT}";
      export "MONGO_USER=${MONGO_USER}";
      export "MONGO_PASSWORD=${MONGO_PASSWORD}";
      export "GITLAB_REGISTRY=${GITLAB_REGISTRY}";
      export "GITLAB_USER=${GITLAB_USER}";
      export "GITLAB_PASS=${GITLAB_PASS}";
      /bin/bash -s " < ./backend/deploy.sh
                                                   
